syntax enable
filetype plugin indent on
" set number
" set relativenumber

set showcmd		" Show (partial) command in status line.
set showmatch		" Show matching brackets.
set autowrite		" Automatically save before commands like :next and :make

set tabstop=2
set shiftwidth=2
set softtabstop=2
set noexpandtab
set autoindent

set listchars=tab:\ \ ,space:Â·
set nolist

set textwidth=80

set laststatus=2
set noesckeys
set wildmenu
set wildmode=list:longest,full
set pumheight=4

set nohlsearch
set incsearch
" set nowrapscan

" backup
set noswapfile
set nobackup
set nowritebackup
set undofile
set undodir=~/.vim/undodir
set undolevels=1000         " How many undos
set undoreload=10000 

if !isdirectory(&undodir)
    call mkdir(&undodir, "p", 0700)
endif

set ignorecase
set smartcase

" For misspelled words (default is red undercurl)
highlight SpellBad ctermfg=red ctermbg=NONE cterm=underline guifg=#ff0000 guibg=NONE gui=undercurl guisp=#ff0000


" Mappings
" emacs
inoremap <silent> <C-a> <Home>        " Move cursor to the beginning of the line
inoremap <silent> <C-e> <End>         " Move cursor to the end of the line
inoremap <silent> <C-f> <Right>       " Move cursor forward one character
inoremap <silent> <C-b> <Left>        " Move cursor backward one character
inoremap <silent> <M-f> <S-Right>     " Move cursor forward one word
inoremap <silent> <M-b> <S-Left>      " Move cursor backward one word
inoremap <silent> <C-h> <BS>          " Delete character before the cursor (Backspace)
inoremap <silent> <C-d> <Del>         " Delete character under the cursor
inoremap <silent> <C-k> <C-o>D        " Cut (kill) from cursor to the end of the line
inoremap <silent> <C-u> <C-g>u<C-g>U " Cut (kill) from cursor to the beginning of the line
inoremap <silent> <M-d> <C-o>dw       " Cut (kill) the next word
inoremap <silent> <C-p> <Up>          " Go to the previous item in history/completion
inoremap <silent> <C-n> <Down>        " Go to the next item in history/completion

let mapleader=" "
" nnoremap <C-d> <C-d>zz
" nnoremap <C-u> <C-u>zz
nnoremap n nzzzv
nnoremap N Nzzzv
nnoremap <Leader>b :ls<CR>:b
nnoremap <leader>d :let g:current_buf = bufnr('%') <bar> bufdo if bufnr('%') != g:current_buf <bar> bdelete <bar> endif<CR><CR>
noremap <Leader>zi <c-w>_ \| <c-w>\|
noremap <Leader>zo <c-w>=
nnoremap <leader>z :%s:\r$::g<CR>
nnoremap <Leader>w :e ~/mywiki/wiki.md<CR>
nnoremap <Leader>ef :silent !mix format %<CR>:e %<CR>:redraw!<CR>
nnoremap <Leader>m :silent make<CR><C-l>:cope 11<CR>
nnoremap <Leader>r :silent make run<CR><C-l> :cope11<CR>
nnoremap <Leader>st :term tree --gitignore
nnoremap <Leader>sf :find 
nnoremap <Leader>ss :sfind 
nnoremap <Leader>sg :vimgrep //j ./**/* <bar> :copen 20<left><left><left><left><left><left><left><left><left><left><left><left><left><left><left><left><left><left><left><left><left>
nnoremap <Leader>swg :exe 'vimgrep /' . expand('<cword>') . '/j ./**/* <bar> :copen 20'<CR>
vnoremap <Leader>svg y:vimgrep "<c-r>"" ./**/* <bar> :cope 20 <CR> 
nnoremap <Leader>j :tjump /
nnoremap <Leader>l :so ~/.vimrc<CR>

"fly args
nnoremap <Leader>a :Args<CR> 
function! Args()
    let prompt = 'Select an argument:'
    let arg_list = map(argv(), 'v:key + 1 . ". " . v:val')
    let chosen_arg = inputlist([prompt] + arg_list)
    if chosen_arg
	execute 'argument ' . chosen_arg
    endif
endfunction
command! Args call Args()

nnoremap <Leader>k :Argsd<CR> 
function! Argsd()
    let prompt = 'Select an argument:'
    let arg_list = map(argv(), 'v:key + 1 . ". " . v:val')
    let chosen_arg = inputlist([prompt] + arg_list)
    if chosen_arg
	execute chosen_arg . 'argd'
    endif
endfunction

command! Argsd call Argsd()
" linuxy style indent options:
" -brf: braces on function definition line 
" -npsl: dont break procedure type
" -pal: pointer align left
nnoremap <Leader>f :w<CR>:!indent -kr -i8 -ut -pal %<CR>

nmap <del> <C-d>

" Finding files
set path=/etc/vim,$VIMRUNTIME,$HOME,$HOME/projects,$HOME/.config,$HOME/Dropbox/,$HOME/Dropbox/MyVaultDrive,$HOME/Dropbox/MyVaultDrive/6*,$VIMRUNTIME/colors,$HOME/Dropbox/mywiki,$HOME/lib,$HOME/bin,./**,

" Spell checking
set encoding=utf-8
" set spellfile=~/.vim/spell/misc.utf-8.add
set spell spelllang=pt,en
set nospell

" Quick fix opts
" autocmd FileType qf nnoremap <buffer> <CR> <CR>:cclose<CR>
autocmd FileType qf nnoremap <buffer> <C-CR> <CR>:cclose<CR>

" Vimdiff colours
" Solarized-friendly diff colors
highlight DiffAdd    cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=#719e07 guibg=#073642
highlight DiffDelete cterm=bold ctermfg=9  ctermbg=17 gui=none guifg=#dc322f guibg=#073642
highlight DiffChange cterm=bold ctermfg=12 ctermbg=17 gui=none guifg=#268bd2 guibg=#073642
highlight DiffText   cterm=bold ctermfg=10 ctermbg=88 gui=none guifg=#719e07 guibg=#839496
highlight Visual ctermbg=240 guibg=#555555
highlight Folded ctermbg=237 ctermfg=223

"Check if we're running in WSL
if system('uname -r') =~ "microsoft"
    " Configure netrw to use wslview for opening URLs/files
    let g:netrw_browsex_viewer = "wslview"
else
    " Use xdg-open for regular Linux systems
    let g:netrw_browsex_viewer = "xdg-open"
endif

" Optional: make the current diff line more visible
highlight CursorLine cterm=none ctermbg=24 gui=none guibg=#073642

" Uncomment the following to have Vim jump to the last position when
" reopening a file
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

runtime! ftplugin/man.vim
